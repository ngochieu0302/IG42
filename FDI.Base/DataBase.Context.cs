//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FDI.Base
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FDIEntities : DbContext
    {
        public FDIEntities()
            : base("name=FDIEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__EFMigrationsHistory> C__EFMigrationsHistory { get; set; }
        public virtual DbSet<ActiveRole> ActiveRoles { get; set; }
        public virtual DbSet<AddMinute> AddMinutes { get; set; }
        public virtual DbSet<Advertising> Advertisings { get; set; }
        public virtual DbSet<Advertising_Position> Advertising_Position { get; set; }
        public virtual DbSet<Advertising_Type> Advertising_Type { get; set; }
        public virtual DbSet<Agency_Module> Agency_Module { get; set; }
        public virtual DbSet<Area> Areas { get; set; }
        public virtual DbSet<aspnet_Applications> aspnet_Applications { get; set; }
        public virtual DbSet<aspnet_Membership> aspnet_Membership { get; set; }
        public virtual DbSet<aspnet_Paths> aspnet_Paths { get; set; }
        public virtual DbSet<aspnet_PersonalizationAllUsers> aspnet_PersonalizationAllUsers { get; set; }
        public virtual DbSet<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUser { get; set; }
        public virtual DbSet<aspnet_Profile> aspnet_Profile { get; set; }
        public virtual DbSet<aspnet_Roles> aspnet_Roles { get; set; }
        public virtual DbSet<aspnet_SchemaVersions> aspnet_SchemaVersions { get; set; }
        public virtual DbSet<aspnet_Users> aspnet_Users { get; set; }
        public virtual DbSet<aspnet_WebEvent_Events> aspnet_WebEvent_Events { get; set; }
        public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }
        public virtual DbSet<AttributeOption> AttributeOptions { get; set; }
        public virtual DbSet<Author> Authors { get; set; }
        public virtual DbSet<Author_Product> Author_Product { get; set; }
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<Banner> Banners { get; set; }
        public virtual DbSet<BiasProduce> BiasProduces { get; set; }
        public virtual DbSet<BonusType> BonusTypes { get; set; }
        public virtual DbSet<Car> Cars { get; set; }
        public virtual DbSet<CashAdvance> CashAdvances { get; set; }
        public virtual DbSet<CashOutWallet> CashOutWallets { get; set; }
        public virtual DbSet<Cate_Value> Cate_Value { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Category_Product_Recipe> Category_Product_Recipe { get; set; }
        public virtual DbSet<Category_Recipe> Category_Recipe { get; set; }
        public virtual DbSet<Category_ShopBrand> Category_ShopBrand { get; set; }
        public virtual DbSet<Category_Tags> Category_Tags { get; set; }
        public virtual DbSet<CategoryControl> CategoryControls { get; set; }
        public virtual DbSet<Comment_Like> Comment_Like { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<ConfigExchange> ConfigExchanges { get; set; }
        public virtual DbSet<ControlValue> ControlValues { get; set; }
        public virtual DbSet<CookieLogin> CookieLogins { get; set; }
        public virtual DbSet<Cost_Product> Cost_Product { get; set; }
        public virtual DbSet<Cost_Product_User> Cost_Product_User { get; set; }
        public virtual DbSet<CostType> CostTypes { get; set; }
        public virtual DbSet<Criteria_Total> Criteria_Total { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Customer_Action> Customer_Action { get; set; }
        public virtual DbSet<Customer_Care> Customer_Care { get; set; }
        public virtual DbSet<Customer_Device> Customer_Device { get; set; }
        public virtual DbSet<Customer_Groups> Customer_Groups { get; set; }
        public virtual DbSet<Customer_History> Customer_History { get; set; }
        public virtual DbSet<Customer_Point> Customer_Point { get; set; }
        public virtual DbSet<Customer_Policy> Customer_Policy { get; set; }
        public virtual DbSet<Customer_question> Customer_question { get; set; }
        public virtual DbSet<Customer_Review> Customer_Review { get; set; }
        public virtual DbSet<Customer_Review_Deltails> Customer_Review_Deltails { get; set; }
        public virtual DbSet<Customer_Reward> Customer_Reward { get; set; }
        public virtual DbSet<Customer_Type> Customer_Type { get; set; }
        public virtual DbSet<Customer_TypeGroup> Customer_TypeGroup { get; set; }
        public virtual DbSet<CustomerAddress> CustomerAddresses { get; set; }
        public virtual DbSet<CustomerContact> CustomerContacts { get; set; }
        public virtual DbSet<CustomerRating> CustomerRatings { get; set; }
        public virtual DbSet<Debt> Debts { get; set; }
        public virtual DbSet<Discount> Discounts { get; set; }
        public virtual DbSet<DiscountCode> DiscountCodes { get; set; }
        public virtual DbSet<DN_Active> DN_Active { get; set; }
        public virtual DbSet<DN_Agency> DN_Agency { get; set; }
        public virtual DbSet<DN_AttributeDynamic> DN_AttributeDynamic { get; set; }
        public virtual DbSet<DN_AttributeGroup> DN_AttributeGroup { get; set; }
        public virtual DbSet<DN_Bed_Desk> DN_Bed_Desk { get; set; }
        public virtual DbSet<DN_Calendar> DN_Calendar { get; set; }
        public virtual DbSet<DN_Calendar_Weekly_Schedule> DN_Calendar_Weekly_Schedule { get; set; }
        public virtual DbSet<DN_Card> DN_Card { get; set; }
        public virtual DbSet<DN_Combo> DN_Combo { get; set; }
        public virtual DbSet<DN_ConfigMonth> DN_ConfigMonth { get; set; }
        public virtual DbSet<DN_ContentVote> DN_ContentVote { get; set; }
        public virtual DbSet<DN_Criteria> DN_Criteria { get; set; }
        public virtual DbSet<DN_DayOff> DN_DayOff { get; set; }
        public virtual DbSet<DN_Department> DN_Department { get; set; }
        public virtual DbSet<DN_Discount> DN_Discount { get; set; }
        public virtual DbSet<DN_Drawer> DN_Drawer { get; set; }
        public virtual DbSet<DN_EDIT_Schedule> DN_EDIT_Schedule { get; set; }
        public virtual DbSet<DN_Enterprises> DN_Enterprises { get; set; }
        public virtual DbSet<DN_Exchange> DN_Exchange { get; set; }
        public virtual DbSet<DN_Export> DN_Export { get; set; }
        public virtual DbSet<DN_ExportProduct> DN_ExportProduct { get; set; }
        public virtual DbSet<DN_File_Mail> DN_File_Mail { get; set; }
        public virtual DbSet<DN_GroupAgency> DN_GroupAgency { get; set; }
        public virtual DbSet<DN_GroupEmail> DN_GroupEmail { get; set; }
        public virtual DbSet<DN_Import> DN_Import { get; set; }
        public virtual DbSet<DN_ImportProduct> DN_ImportProduct { get; set; }
        public virtual DbSet<DN_Level> DN_Level { get; set; }
        public virtual DbSet<DN_Login> DN_Login { get; set; }
        public virtual DbSet<DN_Mail_SSC> DN_Mail_SSC { get; set; }
        public virtual DbSet<DN_Module> DN_Module { get; set; }
        public virtual DbSet<DN_News_Comment> DN_News_Comment { get; set; }
        public virtual DbSet<DN_NewsSSC> DN_NewsSSC { get; set; }
        public virtual DbSet<DN_OrderCard> DN_OrderCard { get; set; }
        public virtual DbSet<DN_Packet> DN_Packet { get; set; }
        public virtual DbSet<DN_Product_Packet> DN_Product_Packet { get; set; }
        public virtual DbSet<DN_Promotion> DN_Promotion { get; set; }
        public virtual DbSet<DN_Question> DN_Question { get; set; }
        public virtual DbSet<DN_RequestWare> DN_RequestWare { get; set; }
        public virtual DbSet<DN_RequestWareDetail> DN_RequestWareDetail { get; set; }
        public virtual DbSet<DN_RequestWarehousing> DN_RequestWarehousing { get; set; }
        public virtual DbSet<DN_RequestWareSupplier> DN_RequestWareSupplier { get; set; }
        public virtual DbSet<DN_Results_Questions> DN_Results_Questions { get; set; }
        public virtual DbSet<DN_Role_ModuleActive> DN_Role_ModuleActive { get; set; }
        public virtual DbSet<DN_Roles> DN_Roles { get; set; }
        public virtual DbSet<DN_Room> DN_Room { get; set; }
        public virtual DbSet<DN_Salary> DN_Salary { get; set; }
        public virtual DbSet<DN_Sale> DN_Sale { get; set; }
        public virtual DbSet<DN_Schedule> DN_Schedule { get; set; }
        public virtual DbSet<DN_Setting> DN_Setting { get; set; }
        public virtual DbSet<DN_Stack> DN_Stack { get; set; }
        public virtual DbSet<DN_Status> DN_Status { get; set; }
        public virtual DbSet<DN_StatusEmail> DN_StatusEmail { get; set; }
        public virtual DbSet<DN_Supplier> DN_Supplier { get; set; }
        public virtual DbSet<DN_SupplierProduct> DN_SupplierProduct { get; set; }
        public virtual DbSet<DN_Time_Group> DN_Time_Group { get; set; }
        public virtual DbSet<DN_Time_Job> DN_Time_Job { get; set; }
        public virtual DbSet<DN_Total_SalaryMonth> DN_Total_SalaryMonth { get; set; }
        public virtual DbSet<DN_Tree> DN_Tree { get; set; }
        public virtual DbSet<DN_TypeCriteria> DN_TypeCriteria { get; set; }
        public virtual DbSet<DN_Unit> DN_Unit { get; set; }
        public virtual DbSet<DN_User_BedDesk> DN_User_BedDesk { get; set; }
        public virtual DbSet<DN_User_ModuleActive> DN_User_ModuleActive { get; set; }
        public virtual DbSet<DN_Users> DN_Users { get; set; }
        public virtual DbSet<DN_UsersInRoles> DN_UsersInRoles { get; set; }
        public virtual DbSet<DN_Vote> DN_Vote { get; set; }
        public virtual DbSet<DN_Weekly> DN_Weekly { get; set; }
        public virtual DbSet<DN_Weekly_Schedule> DN_Weekly_Schedule { get; set; }
        public virtual DbSet<DocumentFile> DocumentFiles { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<Enterprise_Setting> Enterprise_Setting { get; set; }
        public virtual DbSet<Export_Product> Export_Product { get; set; }
        public virtual DbSet<Export_Product_Detail> Export_Product_Detail { get; set; }
        public virtual DbSet<Export_Product_Value> Export_Product_Value { get; set; }
        public virtual DbSet<FAQ_Answer> FAQ_Answer { get; set; }
        public virtual DbSet<FAQ_Category> FAQ_Category { get; set; }
        public virtual DbSet<FAQ_Question> FAQ_Question { get; set; }
        public virtual DbSet<FAQ_Question_Product_Mapping> FAQ_Question_Product_Mapping { get; set; }
        public virtual DbSet<FreightWarehouse> FreightWarehouses { get; set; }
        public virtual DbSet<FreightWareHouse_Active> FreightWareHouse_Active { get; set; }
        public virtual DbSet<Gallery_Picture> Gallery_Picture { get; set; }
        public virtual DbSet<Gallery_Video> Gallery_Video { get; set; }
        public virtual DbSet<GoogleMap> GoogleMaps { get; set; }
        public virtual DbSet<Holiday> Holidays { get; set; }
        public virtual DbSet<HtmlContent> HtmlContents { get; set; }
        public virtual DbSet<HtmlMap> HtmlMaps { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<LevelVote> LevelVotes { get; set; }
        public virtual DbSet<LinkWebsite> LinkWebsites { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<Mapping_Category_Recipe> Mapping_Category_Recipe { get; set; }
        public virtual DbSet<Mapping_ProductDetail_Recipe> Mapping_ProductDetail_Recipe { get; set; }
        public virtual DbSet<MapProduceRequestWare> MapProduceRequestWares { get; set; }
        public virtual DbSet<Market> Markets { get; set; }
        public virtual DbSet<MenuGroup> MenuGroups { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<Module> Modules { get; set; }
        public virtual DbSet<ModuleControl> ModuleControls { get; set; }
        public virtual DbSet<ModulePage> ModulePages { get; set; }
        public virtual DbSet<ModuleSetting> ModuleSettings { get; set; }
        public virtual DbSet<News_Comment> News_Comment { get; set; }
        public virtual DbSet<News_CommentReport> News_CommentReport { get; set; }
        public virtual DbSet<News_Job> News_Job { get; set; }
        public virtual DbSet<News_News> News_News { get; set; }
        public virtual DbSet<News_News_Product> News_News_Product { get; set; }
        public virtual DbSet<Order_Debt> Order_Debt { get; set; }
        public virtual DbSet<Order_Package> Order_Package { get; set; }
        public virtual DbSet<OrderCar> OrderCars { get; set; }
        public virtual DbSet<OrderCarProductDetail> OrderCarProductDetails { get; set; }
        public virtual DbSet<P_Workshop> P_Workshop { get; set; }
        public virtual DbSet<Partner> Partners { get; set; }
        public virtual DbSet<Payment_Method> Payment_Method { get; set; }
        public virtual DbSet<Payments_Order> Payments_Order { get; set; }
        public virtual DbSet<PaymentVoucher> PaymentVouchers { get; set; }
        public virtual DbSet<PolicyAgency> PolicyAgencies { get; set; }
        public virtual DbSet<Position> Positions { get; set; }
        public virtual DbSet<PriceAgency> PriceAgencies { get; set; }
        public virtual DbSet<Produce> Produces { get; set; }
        public virtual DbSet<ProduceCatogory> ProduceCatogories { get; set; }
        public virtual DbSet<ProduceProductDetail> ProduceProductDetails { get; set; }
        public virtual DbSet<ProduceProductPrepare> ProduceProductPrepares { get; set; }
        public virtual DbSet<Product_Promotion> Product_Promotion { get; set; }
        public virtual DbSet<Product_Reading> Product_Reading { get; set; }
        public virtual DbSet<Product_Size> Product_Size { get; set; }
        public virtual DbSet<Product_Value> Product_Value { get; set; }
        public virtual DbSet<ProductCode> ProductCodes { get; set; }
        public virtual DbSet<ProductCode_CostUser> ProductCode_CostUser { get; set; }
        public virtual DbSet<ProductDetail_Recipe> ProductDetail_Recipe { get; set; }
        public virtual DbSet<ProductRating> ProductRatings { get; set; }
        public virtual DbSet<ProductValue_Recipe> ProductValue_Recipe { get; set; }
        public virtual DbSet<Promotion> Promotions { get; set; }
        public virtual DbSet<Promotion_Procuct> Promotion_Procuct { get; set; }
        public virtual DbSet<Promotion_Product> Promotion_Product { get; set; }
        public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }
        public virtual DbSet<PushNotification> PushNotifications { get; set; }
        public virtual DbSet<ReceiptPayment> ReceiptPayments { get; set; }
        public virtual DbSet<ReceiptVoucher> ReceiptVouchers { get; set; }
        public virtual DbSet<ReceiveHistory> ReceiveHistories { get; set; }
        public virtual DbSet<ReciveAgencyHistory> ReciveAgencyHistories { get; set; }
        public virtual DbSet<Repay> Repays { get; set; }
        public virtual DbSet<RewardAgencyHistory> RewardAgencyHistories { get; set; }
        public virtual DbSet<RewardHistory> RewardHistories { get; set; }
        public virtual DbSet<Role_ModuleActive> Role_ModuleActive { get; set; }
        public virtual DbSet<SaleCode> SaleCodes { get; set; }
        public virtual DbSet<Send_Card> Send_Card { get; set; }
        public virtual DbSet<SetupProduction> SetupProductions { get; set; }
        public virtual DbSet<Shop> Shops { get; set; }
        public virtual DbSet<Shop_Brands> Shop_Brands { get; set; }
        public virtual DbSet<Shop_ContactOrder> Shop_ContactOrder { get; set; }
        public virtual DbSet<Shop_ContactOrder_Details> Shop_ContactOrder_Details { get; set; }
        public virtual DbSet<Shop_Order_Details> Shop_Order_Details { get; set; }
        public virtual DbSet<Shop_Orders> Shop_Orders { get; set; }
        public virtual DbSet<Shop_Product> Shop_Product { get; set; }
        public virtual DbSet<Shop_Product_Comingsoon> Shop_Product_Comingsoon { get; set; }
        public virtual DbSet<Shop_Product_Detail> Shop_Product_Detail { get; set; }
        public virtual DbSet<Shop_Product_Picture> Shop_Product_Picture { get; set; }
        public virtual DbSet<Shop_Product_Type> Shop_Product_Type { get; set; }
        public virtual DbSet<Shop_Product_Value> Shop_Product_Value { get; set; }
        public virtual DbSet<Size> Sizes { get; set; }
        public virtual DbSet<SM> SMS { get; set; }
        public virtual DbSet<Source> Sources { get; set; }
        public virtual DbSet<Source_Video> Source_Video { get; set; }
        public virtual DbSet<ST_Group> ST_Group { get; set; }
        public virtual DbSet<Step> Steps { get; set; }
        public virtual DbSet<Storage> Storages { get; set; }
        public virtual DbSet<StorageFreightWarehouse> StorageFreightWarehouses { get; set; }
        public virtual DbSet<StorageProduct> StorageProducts { get; set; }
        public virtual DbSet<StorageWarehousing> StorageWarehousings { get; set; }
        public virtual DbSet<StorageWarehousingLog> StorageWarehousingLogs { get; set; }
        public virtual DbSet<StorageWarehousingUser> StorageWarehousingUsers { get; set; }
        public virtual DbSet<SupplierAmountProduct> SupplierAmountProducts { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<System_City> System_City { get; set; }
        public virtual DbSet<System_Color> System_Color { get; set; }
        public virtual DbSet<System_Config> System_Config { get; set; }
        public virtual DbSet<System_Country> System_Country { get; set; }
        public virtual DbSet<System_District> System_District { get; set; }
        public virtual DbSet<System_File> System_File { get; set; }
        public virtual DbSet<System_FileType> System_FileType { get; set; }
        public virtual DbSet<System_Menu> System_Menu { get; set; }
        public virtual DbSet<System_MessageTemplate> System_MessageTemplate { get; set; }
        public virtual DbSet<System_Tag> System_Tag { get; set; }
        public virtual DbSet<TemplateDocument> TemplateDocuments { get; set; }
        public virtual DbSet<Therapy_History> Therapy_History { get; set; }
        public virtual DbSet<TM_Answer> TM_Answer { get; set; }
        public virtual DbSet<TM_CategoryAnswer> TM_CategoryAnswer { get; set; }
        public virtual DbSet<TM_Customer> TM_Customer { get; set; }
        public virtual DbSet<TM_Module_Rating> TM_Module_Rating { get; set; }
        public virtual DbSet<TM_News_Comment> TM_News_Comment { get; set; }
        public virtual DbSet<TM_Products_Comment> TM_Products_Comment { get; set; }
        public virtual DbSet<TM_Rate_Comment> TM_Rate_Comment { get; set; }
        public virtual DbSet<TokenDevice> TokenDevices { get; set; }
        public virtual DbSet<TokenOtp> TokenOtps { get; set; }
        public virtual DbSet<TokenRefresh> TokenRefreshes { get; set; }
        public virtual DbSet<TotalProductToDay> TotalProductToDays { get; set; }
        public virtual DbSet<TotalStorageWare> TotalStorageWares { get; set; }
        public virtual DbSet<Type> Types { get; set; }
        public virtual DbSet<User_ModuleActive> User_ModuleActive { get; set; }
        public virtual DbSet<UserProfile> UserProfiles { get; set; }
        public virtual DbSet<Vote_Type> Vote_Type { get; set; }
        public virtual DbSet<Wallet_Agency> Wallet_Agency { get; set; }
        public virtual DbSet<WalletCustomer> WalletCustomers { get; set; }
        public virtual DbSet<WalletOrder_History> WalletOrder_History { get; set; }
        public virtual DbSet<Wallet> Wallets { get; set; }
        public virtual DbSet<Ward> Wards { get; set; }
        public virtual DbSet<webpages_Membership> webpages_Membership { get; set; }
        public virtual DbSet<webpages_OAuthMembership> webpages_OAuthMembership { get; set; }
        public virtual DbSet<webpages_Roles> webpages_Roles { get; set; }
        public virtual DbSet<TempCustomer> TempCustomers { get; set; }
        public virtual DbSet<TempShop_Product> TempShop_Product { get; set; }
        public virtual DbSet<Customer_LastOrder> Customer_LastOrder { get; set; }
        public virtual DbSet<vw_aspnet_Applications> vw_aspnet_Applications { get; set; }
        public virtual DbSet<vw_aspnet_MembershipUsers> vw_aspnet_MembershipUsers { get; set; }
        public virtual DbSet<vw_aspnet_Profiles> vw_aspnet_Profiles { get; set; }
        public virtual DbSet<vw_aspnet_Roles> vw_aspnet_Roles { get; set; }
        public virtual DbSet<vw_aspnet_Users> vw_aspnet_Users { get; set; }
        public virtual DbSet<vw_aspnet_UsersInRoles> vw_aspnet_UsersInRoles { get; set; }
        public virtual DbSet<vw_aspnet_WebPartState_Paths> vw_aspnet_WebPartState_Paths { get; set; }
        public virtual DbSet<vw_aspnet_WebPartState_Shared> vw_aspnet_WebPartState_Shared { get; set; }
        public virtual DbSet<vw_aspnet_WebPartState_User> vw_aspnet_WebPartState_User { get; set; }
    
        public virtual int AddItemByIsAll(Nullable<int> moduleid, string listid)
        {
            var moduleidParameter = moduleid.HasValue ?
                new ObjectParameter("moduleid", moduleid) :
                new ObjectParameter("moduleid", typeof(int));
    
            var listidParameter = listid != null ?
                new ObjectParameter("listid", listid) :
                new ObjectParameter("listid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddItemByIsAll", moduleidParameter, listidParameter);
        }
    
        public virtual int AddTotal_SalaryMonth(Nullable<int> month, Nullable<int> year)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTotal_SalaryMonth", monthParameter, yearParameter);
        }
    
        public virtual ObjectResult<AnalysisByAdmin_Result> AnalysisByAdmin(Nullable<decimal> start, Nullable<decimal> end)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(decimal));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AnalysisByAdmin_Result>("AnalysisByAdmin", startParameter, endParameter);
        }
    
        public virtual ObjectResult<AnalysisByEnterprise_Result> AnalysisByEnterprise(Nullable<int> enterprise, Nullable<decimal> start, Nullable<decimal> end)
        {
            var enterpriseParameter = enterprise.HasValue ?
                new ObjectParameter("enterprise", enterprise) :
                new ObjectParameter("enterprise", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(decimal));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AnalysisByEnterprise_Result>("AnalysisByEnterprise", enterpriseParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<string> aspnet_AnyDataInTables(Nullable<int> tablesToCheck)
        {
            var tablesToCheckParameter = tablesToCheck.HasValue ?
                new ObjectParameter("TablesToCheck", tablesToCheck) :
                new ObjectParameter("TablesToCheck", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_AnyDataInTables", tablesToCheckParameter);
        }
    
        public virtual int aspnet_Applications_CreateApplication(string applicationName, ObjectParameter applicationId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Applications_CreateApplication", applicationNameParameter, applicationId);
        }
    
        public virtual int aspnet_CheckSchemaVersion(string feature, string compatibleSchemaVersion)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_CheckSchemaVersion", featureParameter, compatibleSchemaVersionParameter);
        }
    
        public virtual int aspnet_Membership_ApprovedUser(Nullable<int> agency)
        {
            var agencyParameter = agency.HasValue ?
                new ObjectParameter("Agency", agency) :
                new ObjectParameter("Agency", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_ApprovedUser", agencyParameter);
        }
    
        public virtual int aspnet_Membership_ChangePasswordQuestionAndAnswer(string applicationName, string userName, string newPasswordQuestion, string newPasswordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordQuestionParameter = newPasswordQuestion != null ?
                new ObjectParameter("NewPasswordQuestion", newPasswordQuestion) :
                new ObjectParameter("NewPasswordQuestion", typeof(string));
    
            var newPasswordAnswerParameter = newPasswordAnswer != null ?
                new ObjectParameter("NewPasswordAnswer", newPasswordAnswer) :
                new ObjectParameter("NewPasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_ChangePasswordQuestionAndAnswer", applicationNameParameter, userNameParameter, newPasswordQuestionParameter, newPasswordAnswerParameter);
        }
    
        public virtual int aspnet_Membership_CreateUser(string applicationName, string userName, string password, string passwordSalt, string email, string passwordQuestion, string passwordAnswer, Nullable<bool> isApproved, Nullable<System.DateTime> currentTimeUtc, Nullable<System.DateTime> createDate, Nullable<int> uniqueEmail, Nullable<int> passwordFormat, ObjectParameter userId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordQuestionParameter = passwordQuestion != null ?
                new ObjectParameter("PasswordQuestion", passwordQuestion) :
                new ObjectParameter("PasswordQuestion", typeof(string));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var uniqueEmailParameter = uniqueEmail.HasValue ?
                new ObjectParameter("UniqueEmail", uniqueEmail) :
                new ObjectParameter("UniqueEmail", typeof(int));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_CreateUser", applicationNameParameter, userNameParameter, passwordParameter, passwordSaltParameter, emailParameter, passwordQuestionParameter, passwordAnswerParameter, isApprovedParameter, currentTimeUtcParameter, createDateParameter, uniqueEmailParameter, passwordFormatParameter, userId);
        }
    
        public virtual int aspnet_Membership_FindUsersByEmail(string applicationName, string emailToMatch, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var emailToMatchParameter = emailToMatch != null ?
                new ObjectParameter("EmailToMatch", emailToMatch) :
                new ObjectParameter("EmailToMatch", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_FindUsersByEmail", applicationNameParameter, emailToMatchParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_FindUsersByName(string applicationName, string userNameToMatch, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_FindUsersByName", applicationNameParameter, userNameToMatchParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_GetAllUsers(string applicationName, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_GetAllUsers", applicationNameParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_GetNumberOfUsersOnline(string applicationName, Nullable<int> minutesSinceLastInActive, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var minutesSinceLastInActiveParameter = minutesSinceLastInActive.HasValue ?
                new ObjectParameter("MinutesSinceLastInActive", minutesSinceLastInActive) :
                new ObjectParameter("MinutesSinceLastInActive", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_GetNumberOfUsersOnline", applicationNameParameter, minutesSinceLastInActiveParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetPassword_Result> aspnet_Membership_GetPassword(string applicationName, string userName, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, Nullable<System.DateTime> currentTimeUtc, string passwordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetPassword_Result>("aspnet_Membership_GetPassword", applicationNameParameter, userNameParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, currentTimeUtcParameter, passwordAnswerParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetPasswordWithFormat_Result> aspnet_Membership_GetPasswordWithFormat(string applicationName, string userName, Nullable<bool> updateLastLoginActivityDate, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var updateLastLoginActivityDateParameter = updateLastLoginActivityDate.HasValue ?
                new ObjectParameter("UpdateLastLoginActivityDate", updateLastLoginActivityDate) :
                new ObjectParameter("UpdateLastLoginActivityDate", typeof(bool));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetPasswordWithFormat_Result>("aspnet_Membership_GetPasswordWithFormat", applicationNameParameter, userNameParameter, updateLastLoginActivityDateParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<string> aspnet_Membership_GetUserByEmail(string applicationName, string email)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_Membership_GetUserByEmail", applicationNameParameter, emailParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetUserByName_Result> aspnet_Membership_GetUserByName(string applicationName, string userName, Nullable<System.DateTime> currentTimeUtc, Nullable<bool> updateLastActivity)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var updateLastActivityParameter = updateLastActivity.HasValue ?
                new ObjectParameter("UpdateLastActivity", updateLastActivity) :
                new ObjectParameter("UpdateLastActivity", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetUserByName_Result>("aspnet_Membership_GetUserByName", applicationNameParameter, userNameParameter, currentTimeUtcParameter, updateLastActivityParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetUserByUserId_Result> aspnet_Membership_GetUserByUserId(Nullable<System.Guid> userId, Nullable<System.DateTime> currentTimeUtc, Nullable<bool> updateLastActivity)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var updateLastActivityParameter = updateLastActivity.HasValue ?
                new ObjectParameter("UpdateLastActivity", updateLastActivity) :
                new ObjectParameter("UpdateLastActivity", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetUserByUserId_Result>("aspnet_Membership_GetUserByUserId", userIdParameter, currentTimeUtcParameter, updateLastActivityParameter);
        }
    
        public virtual int aspnet_Membership_ResetPassword(string applicationName, string userName, string newPassword, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, string passwordSalt, Nullable<System.DateTime> currentTimeUtc, Nullable<int> passwordFormat, string passwordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_ResetPassword", applicationNameParameter, userNameParameter, newPasswordParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, passwordSaltParameter, currentTimeUtcParameter, passwordFormatParameter, passwordAnswerParameter);
        }
    
        public virtual int aspnet_Membership_SetPassword(string applicationName, string userName, string newPassword, string passwordSalt, Nullable<System.DateTime> currentTimeUtc, Nullable<int> passwordFormat)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_SetPassword", applicationNameParameter, userNameParameter, newPasswordParameter, passwordSaltParameter, currentTimeUtcParameter, passwordFormatParameter);
        }
    
        public virtual int aspnet_Membership_UnlockUser(string applicationName, string userName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UnlockUser", applicationNameParameter, userNameParameter);
        }
    
        public virtual int aspnet_Membership_UpdateUser(string applicationName, string userName, string email, string comment, Nullable<bool> isApproved, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastActivityDate, Nullable<int> uniqueEmail, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("LastLoginDate", lastLoginDate) :
                new ObjectParameter("LastLoginDate", typeof(System.DateTime));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            var uniqueEmailParameter = uniqueEmail.HasValue ?
                new ObjectParameter("UniqueEmail", uniqueEmail) :
                new ObjectParameter("UniqueEmail", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UpdateUser", applicationNameParameter, userNameParameter, emailParameter, commentParameter, isApprovedParameter, lastLoginDateParameter, lastActivityDateParameter, uniqueEmailParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_Membership_UpdateUserInfo(string applicationName, string userName, Nullable<bool> isPasswordCorrect, Nullable<bool> updateLastLoginActivityDate, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, Nullable<System.DateTime> currentTimeUtc, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastActivityDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isPasswordCorrectParameter = isPasswordCorrect.HasValue ?
                new ObjectParameter("IsPasswordCorrect", isPasswordCorrect) :
                new ObjectParameter("IsPasswordCorrect", typeof(bool));
    
            var updateLastLoginActivityDateParameter = updateLastLoginActivityDate.HasValue ?
                new ObjectParameter("UpdateLastLoginActivityDate", updateLastLoginActivityDate) :
                new ObjectParameter("UpdateLastLoginActivityDate", typeof(bool));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("LastLoginDate", lastLoginDate) :
                new ObjectParameter("LastLoginDate", typeof(System.DateTime));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UpdateUserInfo", applicationNameParameter, userNameParameter, isPasswordCorrectParameter, updateLastLoginActivityDateParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, currentTimeUtcParameter, lastLoginDateParameter, lastActivityDateParameter);
        }
    
        public virtual int aspnet_Paths_CreatePath(Nullable<System.Guid> applicationId, string path, ObjectParameter pathId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(System.Guid));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Paths_CreatePath", applicationIdParameter, pathParameter, pathId);
        }
    
        public virtual int aspnet_Personalization_GetApplicationId(string applicationName, ObjectParameter applicationId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Personalization_GetApplicationId", applicationNameParameter, applicationId);
        }
    
        public virtual int aspnet_PersonalizationAdministration_DeleteAllState(Nullable<bool> allUsersScope, string applicationName, ObjectParameter count)
        {
            var allUsersScopeParameter = allUsersScope.HasValue ?
                new ObjectParameter("AllUsersScope", allUsersScope) :
                new ObjectParameter("AllUsersScope", typeof(bool));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_DeleteAllState", allUsersScopeParameter, applicationNameParameter, count);
        }
    
        public virtual int aspnet_PersonalizationAdministration_FindState(Nullable<bool> allUsersScope, string applicationName, Nullable<int> pageIndex, Nullable<int> pageSize, string path, string userName, Nullable<System.DateTime> inactiveSinceDate)
        {
            var allUsersScopeParameter = allUsersScope.HasValue ?
                new ObjectParameter("AllUsersScope", allUsersScope) :
                new ObjectParameter("AllUsersScope", typeof(bool));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_FindState", allUsersScopeParameter, applicationNameParameter, pageIndexParameter, pageSizeParameter, pathParameter, userNameParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_PersonalizationAdministration_GetCountOfState(ObjectParameter count, Nullable<bool> allUsersScope, string applicationName, string path, string userName, Nullable<System.DateTime> inactiveSinceDate)
        {
            var allUsersScopeParameter = allUsersScope.HasValue ?
                new ObjectParameter("AllUsersScope", allUsersScope) :
                new ObjectParameter("AllUsersScope", typeof(bool));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_GetCountOfState", count, allUsersScopeParameter, applicationNameParameter, pathParameter, userNameParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_PersonalizationAdministration_ResetSharedState(ObjectParameter count, string applicationName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_ResetSharedState", count, applicationNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAdministration_ResetUserState(ObjectParameter count, string applicationName, Nullable<System.DateTime> inactiveSinceDate, string userName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_ResetUserState", count, applicationNameParameter, inactiveSinceDateParameter, userNameParameter, pathParameter);
        }
    
        public virtual ObjectResult<byte[]> aspnet_PersonalizationAllUsers_GetPageSettings(string applicationName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("aspnet_PersonalizationAllUsers_GetPageSettings", applicationNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAllUsers_ResetPageSettings(string applicationName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAllUsers_ResetPageSettings", applicationNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAllUsers_SetPageSettings(string applicationName, string path, byte[] pageSettings, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var pageSettingsParameter = pageSettings != null ?
                new ObjectParameter("PageSettings", pageSettings) :
                new ObjectParameter("PageSettings", typeof(byte[]));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAllUsers_SetPageSettings", applicationNameParameter, pathParameter, pageSettingsParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<byte[]> aspnet_PersonalizationPerUser_GetPageSettings(string applicationName, string userName, string path, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("aspnet_PersonalizationPerUser_GetPageSettings", applicationNameParameter, userNameParameter, pathParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_PersonalizationPerUser_ResetPageSettings(string applicationName, string userName, string path, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationPerUser_ResetPageSettings", applicationNameParameter, userNameParameter, pathParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_PersonalizationPerUser_SetPageSettings(string applicationName, string userName, string path, byte[] pageSettings, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var pageSettingsParameter = pageSettings != null ?
                new ObjectParameter("PageSettings", pageSettings) :
                new ObjectParameter("PageSettings", typeof(byte[]));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationPerUser_SetPageSettings", applicationNameParameter, userNameParameter, pathParameter, pageSettingsParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> aspnet_Profile_DeleteInactiveProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_DeleteInactiveProfiles", applicationNameParameter, profileAuthOptionsParameter, inactiveSinceDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> aspnet_Profile_DeleteProfiles(string applicationName, string userNames)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNamesParameter = userNames != null ?
                new ObjectParameter("UserNames", userNames) :
                new ObjectParameter("UserNames", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_DeleteProfiles", applicationNameParameter, userNamesParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> aspnet_Profile_GetNumberOfInactiveProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_GetNumberOfInactiveProfiles", applicationNameParameter, profileAuthOptionsParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_Profile_GetProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<int> pageIndex, Nullable<int> pageSize, string userNameToMatch, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Profile_GetProfiles", applicationNameParameter, profileAuthOptionsParameter, pageIndexParameter, pageSizeParameter, userNameToMatchParameter, inactiveSinceDateParameter);
        }
    
        public virtual ObjectResult<aspnet_Profile_GetProperties_Result> aspnet_Profile_GetProperties(string applicationName, string userName, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Profile_GetProperties_Result>("aspnet_Profile_GetProperties", applicationNameParameter, userNameParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_Profile_SetProperties(string applicationName, string propertyNames, string propertyValuesString, byte[] propertyValuesBinary, string userName, Nullable<bool> isUserAnonymous, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var propertyNamesParameter = propertyNames != null ?
                new ObjectParameter("PropertyNames", propertyNames) :
                new ObjectParameter("PropertyNames", typeof(string));
    
            var propertyValuesStringParameter = propertyValuesString != null ?
                new ObjectParameter("PropertyValuesString", propertyValuesString) :
                new ObjectParameter("PropertyValuesString", typeof(string));
    
            var propertyValuesBinaryParameter = propertyValuesBinary != null ?
                new ObjectParameter("PropertyValuesBinary", propertyValuesBinary) :
                new ObjectParameter("PropertyValuesBinary", typeof(byte[]));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isUserAnonymousParameter = isUserAnonymous.HasValue ?
                new ObjectParameter("IsUserAnonymous", isUserAnonymous) :
                new ObjectParameter("IsUserAnonymous", typeof(bool));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Profile_SetProperties", applicationNameParameter, propertyNamesParameter, propertyValuesStringParameter, propertyValuesBinaryParameter, userNameParameter, isUserAnonymousParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_RegisterSchemaVersion(string feature, string compatibleSchemaVersion, Nullable<bool> isCurrentVersion, Nullable<bool> removeIncompatibleSchema)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            var isCurrentVersionParameter = isCurrentVersion.HasValue ?
                new ObjectParameter("IsCurrentVersion", isCurrentVersion) :
                new ObjectParameter("IsCurrentVersion", typeof(bool));
    
            var removeIncompatibleSchemaParameter = removeIncompatibleSchema.HasValue ?
                new ObjectParameter("RemoveIncompatibleSchema", removeIncompatibleSchema) :
                new ObjectParameter("RemoveIncompatibleSchema", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_RegisterSchemaVersion", featureParameter, compatibleSchemaVersionParameter, isCurrentVersionParameter, removeIncompatibleSchemaParameter);
        }
    
        public virtual int aspnet_Roles_CreateRole(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_CreateRole", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_Roles_DeleteRole(string applicationName, string roleName, Nullable<bool> deleteOnlyIfRoleIsEmpty)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var deleteOnlyIfRoleIsEmptyParameter = deleteOnlyIfRoleIsEmpty.HasValue ?
                new ObjectParameter("DeleteOnlyIfRoleIsEmpty", deleteOnlyIfRoleIsEmpty) :
                new ObjectParameter("DeleteOnlyIfRoleIsEmpty", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_DeleteRole", applicationNameParameter, roleNameParameter, deleteOnlyIfRoleIsEmptyParameter);
        }
    
        public virtual ObjectResult<string> aspnet_Roles_GetAllRoles(string applicationName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_Roles_GetAllRoles", applicationNameParameter);
        }
    
        public virtual int aspnet_Roles_RoleExists(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_RoleExists", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_Setup_RemoveAllRoleMembers(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Setup_RemoveAllRoleMembers", nameParameter);
        }
    
        public virtual int aspnet_Setup_RestorePermissions(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Setup_RestorePermissions", nameParameter);
        }
    
        public virtual int aspnet_UnRegisterSchemaVersion(string feature, string compatibleSchemaVersion)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_UnRegisterSchemaVersion", featureParameter, compatibleSchemaVersionParameter);
        }
    
        public virtual int aspnet_Users_CreateUser(Nullable<System.Guid> applicationId, string userName, Nullable<bool> isUserAnonymous, Nullable<System.DateTime> lastActivityDate, ObjectParameter userId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(System.Guid));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isUserAnonymousParameter = isUserAnonymous.HasValue ?
                new ObjectParameter("IsUserAnonymous", isUserAnonymous) :
                new ObjectParameter("IsUserAnonymous", typeof(bool));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Users_CreateUser", applicationIdParameter, userNameParameter, isUserAnonymousParameter, lastActivityDateParameter, userId);
        }
    
        public virtual int aspnet_Users_DeleteUser(string applicationName, string userName, Nullable<int> tablesToDeleteFrom, ObjectParameter numTablesDeletedFrom)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var tablesToDeleteFromParameter = tablesToDeleteFrom.HasValue ?
                new ObjectParameter("TablesToDeleteFrom", tablesToDeleteFrom) :
                new ObjectParameter("TablesToDeleteFrom", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Users_DeleteUser", applicationNameParameter, userNameParameter, tablesToDeleteFromParameter, numTablesDeletedFrom);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_AddUsersToRoles(string applicationName, string userNames, string roleNames, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNamesParameter = userNames != null ?
                new ObjectParameter("UserNames", userNames) :
                new ObjectParameter("UserNames", typeof(string));
    
            var roleNamesParameter = roleNames != null ?
                new ObjectParameter("RoleNames", roleNames) :
                new ObjectParameter("RoleNames", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_AddUsersToRoles", applicationNameParameter, userNamesParameter, roleNamesParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_FindUsersInRole(string applicationName, string roleName, string userNameToMatch)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_FindUsersInRole", applicationNameParameter, roleNameParameter, userNameToMatchParameter);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_GetRolesForUser(string applicationName, string userName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_GetRolesForUser", applicationNameParameter, userNameParameter);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_GetUsersInRoles(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_GetUsersInRoles", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_UsersInRoles_IsUserInRole(string applicationName, string userName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_UsersInRoles_IsUserInRole", applicationNameParameter, userNameParameter, roleNameParameter);
        }
    
        public virtual ObjectResult<aspnet_UsersInRoles_RemoveUsersFromRoles_Result> aspnet_UsersInRoles_RemoveUsersFromRoles(string applicationName, string userNames, string roleNames)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNamesParameter = userNames != null ?
                new ObjectParameter("UserNames", userNames) :
                new ObjectParameter("UserNames", typeof(string));
    
            var roleNamesParameter = roleNames != null ?
                new ObjectParameter("RoleNames", roleNames) :
                new ObjectParameter("RoleNames", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_UsersInRoles_RemoveUsersFromRoles_Result>("aspnet_UsersInRoles_RemoveUsersFromRoles", applicationNameParameter, userNamesParameter, roleNamesParameter);
        }
    
        public virtual int aspnet_WebEvent_LogEvent(string eventId, Nullable<System.DateTime> eventTimeUtc, Nullable<System.DateTime> eventTime, string eventType, Nullable<decimal> eventSequence, Nullable<decimal> eventOccurrence, Nullable<int> eventCode, Nullable<int> eventDetailCode, string message, string applicationPath, string applicationVirtualPath, string machineName, string requestUrl, string exceptionType, string details)
        {
            var eventIdParameter = eventId != null ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(string));
    
            var eventTimeUtcParameter = eventTimeUtc.HasValue ?
                new ObjectParameter("EventTimeUtc", eventTimeUtc) :
                new ObjectParameter("EventTimeUtc", typeof(System.DateTime));
    
            var eventTimeParameter = eventTime.HasValue ?
                new ObjectParameter("EventTime", eventTime) :
                new ObjectParameter("EventTime", typeof(System.DateTime));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var eventSequenceParameter = eventSequence.HasValue ?
                new ObjectParameter("EventSequence", eventSequence) :
                new ObjectParameter("EventSequence", typeof(decimal));
    
            var eventOccurrenceParameter = eventOccurrence.HasValue ?
                new ObjectParameter("EventOccurrence", eventOccurrence) :
                new ObjectParameter("EventOccurrence", typeof(decimal));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventDetailCodeParameter = eventDetailCode.HasValue ?
                new ObjectParameter("EventDetailCode", eventDetailCode) :
                new ObjectParameter("EventDetailCode", typeof(int));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var applicationPathParameter = applicationPath != null ?
                new ObjectParameter("ApplicationPath", applicationPath) :
                new ObjectParameter("ApplicationPath", typeof(string));
    
            var applicationVirtualPathParameter = applicationVirtualPath != null ?
                new ObjectParameter("ApplicationVirtualPath", applicationVirtualPath) :
                new ObjectParameter("ApplicationVirtualPath", typeof(string));
    
            var machineNameParameter = machineName != null ?
                new ObjectParameter("MachineName", machineName) :
                new ObjectParameter("MachineName", typeof(string));
    
            var requestUrlParameter = requestUrl != null ?
                new ObjectParameter("RequestUrl", requestUrl) :
                new ObjectParameter("RequestUrl", typeof(string));
    
            var exceptionTypeParameter = exceptionType != null ?
                new ObjectParameter("ExceptionType", exceptionType) :
                new ObjectParameter("ExceptionType", typeof(string));
    
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_WebEvent_LogEvent", eventIdParameter, eventTimeUtcParameter, eventTimeParameter, eventTypeParameter, eventSequenceParameter, eventOccurrenceParameter, eventCodeParameter, eventDetailCodeParameter, messageParameter, applicationPathParameter, applicationVirtualPathParameter, machineNameParameter, requestUrlParameter, exceptionTypeParameter, detailsParameter);
        }
    
        [DbFunction("FDIEntities", "AutoCateValueFull")]
        public virtual IQueryable<Nullable<int>> AutoCateValueFull(string name, Nullable<int> t, Nullable<int> type)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var tParameter = t.HasValue ?
                new ObjectParameter("t", t) :
                new ObjectParameter("t", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<int>>("[FDIEntities].[AutoCateValueFull](@Name, @t, @type)", nameParameter, tParameter, typeParameter);
        }
    
        [DbFunction("FDIEntities", "AutoProduct")]
        public virtual IQueryable<Nullable<int>> AutoProduct(string name, Nullable<int> t)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var tParameter = t.HasValue ?
                new ObjectParameter("t", t) :
                new ObjectParameter("t", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<int>>("[FDIEntities].[AutoProduct](@Name, @t)", nameParameter, tParameter);
        }
    
        [DbFunction("FDIEntities", "AutoProductDetail")]
        public virtual IQueryable<Nullable<int>> AutoProductDetail(string name, Nullable<int> t)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var tParameter = t.HasValue ?
                new ObjectParameter("t", t) :
                new ObjectParameter("t", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<int>>("[FDIEntities].[AutoProductDetail](@Name, @t)", nameParameter, tParameter);
        }
    
        [DbFunction("FDIEntities", "AutoProductFull")]
        public virtual IQueryable<Nullable<int>> AutoProductFull(string name, Nullable<int> t)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var tParameter = t.HasValue ?
                new ObjectParameter("t", t) :
                new ObjectParameter("t", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<int>>("[FDIEntities].[AutoProductFull](@Name, @t)", nameParameter, tParameter);
        }
    
        [DbFunction("FDIEntities", "AutoProductOne")]
        public virtual IQueryable<Nullable<int>> AutoProductOne(string name, Nullable<int> t, Nullable<int> agencyid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var tParameter = t.HasValue ?
                new ObjectParameter("t", t) :
                new ObjectParameter("t", typeof(int));
    
            var agencyidParameter = agencyid.HasValue ?
                new ObjectParameter("agencyid", agencyid) :
                new ObjectParameter("agencyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<int>>("[FDIEntities].[AutoProductOne](@Name, @t, @agencyid)", nameParameter, tParameter, agencyidParameter);
        }
    
        [DbFunction("FDIEntities", "AutoProductValueFull")]
        public virtual IQueryable<Nullable<int>> AutoProductValueFull(string name, Nullable<int> t)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var tParameter = t.HasValue ?
                new ObjectParameter("t", t) :
                new ObjectParameter("t", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<int>>("[FDIEntities].[AutoProductValueFull](@Name, @t)", nameParameter, tParameter);
        }
    
        public virtual ObjectResult<AutoSelectCateValueFull_Result> AutoSelectCateValueFull(string name, Nullable<int> t, Nullable<int> type)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var tParameter = t.HasValue ?
                new ObjectParameter("t", t) :
                new ObjectParameter("t", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AutoSelectCateValueFull_Result>("AutoSelectCateValueFull", nameParameter, tParameter, typeParameter);
        }
    
        public virtual ObjectResult<AutoSelectProduct_Result> AutoSelectProduct(string name, Nullable<int> t)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var tParameter = t.HasValue ?
                new ObjectParameter("t", t) :
                new ObjectParameter("t", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AutoSelectProduct_Result>("AutoSelectProduct", nameParameter, tParameter);
        }
    
        public virtual ObjectResult<AutoSelectProductDetail_Result> AutoSelectProductDetail(string name, Nullable<int> t)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var tParameter = t.HasValue ?
                new ObjectParameter("t", t) :
                new ObjectParameter("t", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AutoSelectProductDetail_Result>("AutoSelectProductDetail", nameParameter, tParameter);
        }
    
        public virtual ObjectResult<AutoSelectProductFull_Result> AutoSelectProductFull(string name, Nullable<int> t)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var tParameter = t.HasValue ?
                new ObjectParameter("t", t) :
                new ObjectParameter("t", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AutoSelectProductFull_Result>("AutoSelectProductFull", nameParameter, tParameter);
        }
    
        public virtual ObjectResult<AutoSelectProductOne_Result> AutoSelectProductOne(string name, Nullable<int> t, Nullable<int> agencyid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var tParameter = t.HasValue ?
                new ObjectParameter("t", t) :
                new ObjectParameter("t", typeof(int));
    
            var agencyidParameter = agencyid.HasValue ?
                new ObjectParameter("agencyid", agencyid) :
                new ObjectParameter("agencyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AutoSelectProductOne_Result>("AutoSelectProductOne", nameParameter, tParameter, agencyidParameter);
        }
    
        public virtual ObjectResult<AutoSelectProductValueFull_Result> AutoSelectProductValueFull(string name, Nullable<int> t)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var tParameter = t.HasValue ?
                new ObjectParameter("t", t) :
                new ObjectParameter("t", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AutoSelectProductValueFull_Result>("AutoSelectProductValueFull", nameParameter, tParameter);
        }
    
        public virtual int Category_GetChildByParentId(Nullable<int> parent, Nullable<int> type, string languageId, Nullable<bool> root)
        {
            var parentParameter = parent.HasValue ?
                new ObjectParameter("Parent", parent) :
                new ObjectParameter("Parent", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var languageIdParameter = languageId != null ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(string));
    
            var rootParameter = root.HasValue ?
                new ObjectParameter("Root", root) :
                new ObjectParameter("Root", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Category_GetChildByParentId", parentParameter, typeParameter, languageIdParameter, rootParameter);
        }
    
        public virtual int Category_GetChildByParentIdOld(Nullable<int> parent, Nullable<int> type, string languageId, Nullable<bool> root)
        {
            var parentParameter = parent.HasValue ?
                new ObjectParameter("Parent", parent) :
                new ObjectParameter("Parent", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var languageIdParameter = languageId != null ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(string));
    
            var rootParameter = root.HasValue ?
                new ObjectParameter("Root", root) :
                new ObjectParameter("Root", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Category_GetChildByParentIdOld", parentParameter, typeParameter, languageIdParameter, rootParameter);
        }
    
        public virtual ObjectResult<Category_GetList_Result> Category_GetList(string languageId)
        {
            var languageIdParameter = languageId != null ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Category_GetList_Result>("Category_GetList", languageIdParameter);
        }
    
        public virtual ObjectResult<Category_GetListByUser_Result> Category_GetListByUser(string languageId, Nullable<bool> isAdmin, Nullable<System.Guid> userid, Nullable<int> type)
        {
            var languageIdParameter = languageId != null ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(string));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("IsAdmin", isAdmin) :
                new ObjectParameter("IsAdmin", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(System.Guid));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Category_GetListByUser_Result>("Category_GetListByUser", languageIdParameter, isAdminParameter, useridParameter, typeParameter);
        }
    
        public virtual ObjectResult<ContactToOrder_Result> ContactToOrder(Nullable<int> id, Nullable<System.Guid> userId, Nullable<int> date, Nullable<int> dateend, Nullable<int> value)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(int));
    
            var dateendParameter = dateend.HasValue ?
                new ObjectParameter("dateend", dateend) :
                new ObjectParameter("dateend", typeof(int));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ContactToOrder_Result>("ContactToOrder", idParameter, userIdParameter, dateParameter, dateendParameter, valueParameter);
        }
    
        public virtual int CopyModule(Nullable<int> moduleControlIdCopy, Nullable<int> moduleControlIdNew, string language)
        {
            var moduleControlIdCopyParameter = moduleControlIdCopy.HasValue ?
                new ObjectParameter("ModuleControlIdCopy", moduleControlIdCopy) :
                new ObjectParameter("ModuleControlIdCopy", typeof(int));
    
            var moduleControlIdNewParameter = moduleControlIdNew.HasValue ?
                new ObjectParameter("ModuleControlIdNew", moduleControlIdNew) :
                new ObjectParameter("ModuleControlIdNew", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CopyModule", moduleControlIdCopyParameter, moduleControlIdNewParameter, languageParameter);
        }
    
        [DbFunction("FDIEntities", "DayInMonth")]
        public virtual IQueryable<DayInMonth_Result> DayInMonth(Nullable<int> year, Nullable<int> month)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<DayInMonth_Result>("[FDIEntities].[DayInMonth](@year, @month)", yearParameter, monthParameter);
        }
    
        [DbFunction("FDIEntities", "DayInWeekNow")]
        public virtual IQueryable<DayInWeekNow_Result> DayInWeekNow(Nullable<System.DateTime> d)
        {
            var dParameter = d.HasValue ?
                new ObjectParameter("d", d) :
                new ObjectParameter("d", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<DayInWeekNow_Result>("[FDIEntities].[DayInWeekNow](@d)", dParameter);
        }
    
        public virtual int DeleteAdminModuleUserRole(Nullable<int> moduleid, string ltruser, string ltrrole)
        {
            var moduleidParameter = moduleid.HasValue ?
                new ObjectParameter("moduleid", moduleid) :
                new ObjectParameter("moduleid", typeof(int));
    
            var ltruserParameter = ltruser != null ?
                new ObjectParameter("ltruser", ltruser) :
                new ObjectParameter("ltruser", typeof(string));
    
            var ltrroleParameter = ltrrole != null ?
                new ObjectParameter("ltrrole", ltrrole) :
                new ObjectParameter("ltrrole", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAdminModuleUserRole", moduleidParameter, ltruserParameter, ltrroleParameter);
        }
    
        public virtual int DeleteItemByIAll(Nullable<int> moduleid, string lid)
        {
            var moduleidParameter = moduleid.HasValue ?
                new ObjectParameter("moduleid", moduleid) :
                new ObjectParameter("moduleid", typeof(int));
    
            var lidParameter = lid != null ?
                new ObjectParameter("lid", lid) :
                new ObjectParameter("lid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteItemByIAll", moduleidParameter, lidParameter);
        }
    
        public virtual int DeleteModuleUserRole(Nullable<int> moduleid, string ltruser, string ltrrole)
        {
            var moduleidParameter = moduleid.HasValue ?
                new ObjectParameter("moduleid", moduleid) :
                new ObjectParameter("moduleid", typeof(int));
    
            var ltruserParameter = ltruser != null ?
                new ObjectParameter("ltruser", ltruser) :
                new ObjectParameter("ltruser", typeof(string));
    
            var ltrroleParameter = ltrrole != null ?
                new ObjectParameter("ltrrole", ltrrole) :
                new ObjectParameter("ltrrole", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteModuleUserRole", moduleidParameter, ltruserParameter, ltrroleParameter);
        }
    
        public virtual int Department_GetChildByParentId(Nullable<int> parentId, string languageId, Nullable<bool> root)
        {
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            var languageIdParameter = languageId != null ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(string));
    
            var rootParameter = root.HasValue ?
                new ObjectParameter("Root", root) :
                new ObjectParameter("Root", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Department_GetChildByParentId", parentIdParameter, languageIdParameter, rootParameter);
        }
    
        public virtual ObjectResult<DNModule_GetChildByParentId_Result> DNModule_GetChildByParentId(Nullable<int> parent, Nullable<int> agencyID, Nullable<bool> root)
        {
            var parentParameter = parent.HasValue ?
                new ObjectParameter("Parent", parent) :
                new ObjectParameter("Parent", typeof(int));
    
            var agencyIDParameter = agencyID.HasValue ?
                new ObjectParameter("AgencyID", agencyID) :
                new ObjectParameter("AgencyID", typeof(int));
    
            var rootParameter = root.HasValue ?
                new ObjectParameter("Root", root) :
                new ObjectParameter("Root", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DNModule_GetChildByParentId_Result>("DNModule_GetChildByParentId", parentParameter, agencyIDParameter, rootParameter);
        }
    
        public virtual int FilterCategoryAndBrand(Nullable<int> categoryId, Nullable<int> brandId, Nullable<int> topRecord)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var topRecordParameter = topRecord.HasValue ?
                new ObjectParameter("TopRecord", topRecord) :
                new ObjectParameter("TopRecord", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FilterCategoryAndBrand", categoryIdParameter, brandIdParameter, topRecordParameter);
        }
    
        [DbFunction("FDIEntities", "fnSplit")]
        public virtual IQueryable<string> fnSplit(string sInputList, string sDelimiter)
        {
            var sInputListParameter = sInputList != null ?
                new ObjectParameter("sInputList", sInputList) :
                new ObjectParameter("sInputList", typeof(string));
    
            var sDelimiterParameter = sDelimiter != null ?
                new ObjectParameter("sDelimiter", sDelimiter) :
                new ObjectParameter("sDelimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[FDIEntities].[fnSplit](@sInputList, @sDelimiter)", sInputListParameter, sDelimiterParameter);
        }
    
        public virtual ObjectResult<GeneralMonth_Result> GeneralMonth(Nullable<int> year, Nullable<int> mont, Nullable<int> aid)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var montParameter = mont.HasValue ?
                new ObjectParameter("mont", mont) :
                new ObjectParameter("mont", typeof(int));
    
            var aidParameter = aid.HasValue ?
                new ObjectParameter("aid", aid) :
                new ObjectParameter("aid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GeneralMonth_Result>("GeneralMonth", yearParameter, montParameter, aidParameter);
        }
    
        public virtual ObjectResult<GeneralWeek_Result> GeneralWeek(Nullable<int> aid)
        {
            var aidParameter = aid.HasValue ?
                new ObjectParameter("aid", aid) :
                new ObjectParameter("aid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GeneralWeek_Result>("GeneralWeek", aidParameter);
        }
    
        public virtual ObjectResult<GeneralYear_Result> GeneralYear(Nullable<int> year, Nullable<int> aid)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var aidParameter = aid.HasValue ?
                new ObjectParameter("aid", aid) :
                new ObjectParameter("aid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GeneralYear_Result>("GeneralYear", yearParameter, aidParameter);
        }
    
        public virtual ObjectResult<GeneralYearByEnterprises_Result> GeneralYearByEnterprises(Nullable<int> year, Nullable<int> eid)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var eidParameter = eid.HasValue ?
                new ObjectParameter("eid", eid) :
                new ObjectParameter("eid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GeneralYearByEnterprises_Result>("GeneralYearByEnterprises", yearParameter, eidParameter);
        }
    
        public virtual ObjectResult<GetAllAnalysis_Result> GetAllAnalysis(Nullable<int> agencyid, Nullable<decimal> start, Nullable<decimal> end)
        {
            var agencyidParameter = agencyid.HasValue ?
                new ObjectParameter("agencyid", agencyid) :
                new ObjectParameter("agencyid", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(decimal));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllAnalysis_Result>("GetAllAnalysis", agencyidParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<GetAllProductByCategoryID_Result> GetAllProductByCategoryID(string categoryID)
        {
            var categoryIDParameter = categoryID != null ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllProductByCategoryID_Result>("GetAllProductByCategoryID", categoryIDParameter);
        }
    
        public virtual ObjectResult<GetAttribute_Result> GetAttribute(string str, Nullable<int> pid)
        {
            var strParameter = str != null ?
                new ObjectParameter("str", str) :
                new ObjectParameter("str", typeof(string));
    
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAttribute_Result>("GetAttribute", strParameter, pidParameter);
        }
    
        public virtual int GetAutoCustomer(string txt)
        {
            var txtParameter = txt != null ?
                new ObjectParameter("txt", txt) :
                new ObjectParameter("txt", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAutoCustomer", txtParameter);
        }
    
        public virtual int GetAutoProduct(string txt)
        {
            var txtParameter = txt != null ?
                new ObjectParameter("txt", txt) :
                new ObjectParameter("txt", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAutoProduct", txtParameter);
        }
    
        public virtual int GetAutoProductShop(string txt, Nullable<int> shopId)
        {
            var txtParameter = txt != null ?
                new ObjectParameter("txt", txt) :
                new ObjectParameter("txt", typeof(string));
    
            var shopIdParameter = shopId.HasValue ?
                new ObjectParameter("shopId", shopId) :
                new ObjectParameter("shopId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAutoProductShop", txtParameter, shopIdParameter);
        }
    
        public virtual ObjectResult<GetBySouceByBarcode_Result> GetBySouceByBarcode(string barcode, Nullable<int> cusId)
        {
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var cusIdParameter = cusId.HasValue ?
                new ObjectParameter("cusId", cusId) :
                new ObjectParameter("cusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBySouceByBarcode_Result>("GetBySouceByBarcode", barcodeParameter, cusIdParameter);
        }
    
        public virtual ObjectResult<GetListHtml_Result> GetListHtml(Nullable<int> id, string lang)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var langParameter = lang != null ?
                new ObjectParameter("lang", lang) :
                new ObjectParameter("lang", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListHtml_Result>("GetListHtml", idParameter, langParameter);
        }
    
        public virtual ObjectResult<GetListTree_Result> GetListTree(Nullable<int> agencyId)
        {
            var agencyIdParameter = agencyId.HasValue ?
                new ObjectParameter("AgencyId", agencyId) :
                new ObjectParameter("AgencyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListTree_Result>("GetListTree", agencyIdParameter);
        }
    
        [DbFunction("FDIEntities", "GetMonthRecentDatetime")]
        public virtual IQueryable<GetMonthRecentDatetime_Result> GetMonthRecentDatetime(Nullable<int> i)
        {
            var iParameter = i.HasValue ?
                new ObjectParameter("i", i) :
                new ObjectParameter("i", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetMonthRecentDatetime_Result>("[FDIEntities].[GetMonthRecentDatetime](@i)", iParameter);
        }
    
        [DbFunction("FDIEntities", "GetMonthRecentDecimal")]
        public virtual IQueryable<GetMonthRecentDecimal_Result> GetMonthRecentDecimal(Nullable<int> i)
        {
            var iParameter = i.HasValue ?
                new ObjectParameter("i", i) :
                new ObjectParameter("i", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetMonthRecentDecimal_Result>("[FDIEntities].[GetMonthRecentDecimal](@i)", iParameter);
        }
    
        public virtual int GetStatisticsVote(string languageId)
        {
            var languageIdParameter = languageId != null ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetStatisticsVote", languageIdParameter);
        }
    
        public virtual ObjectResult<GroupProductGetOrderShop_Result> GroupProductGetOrderShop(Nullable<int> customerID, Nullable<bool> isAll, Nullable<decimal> dates, Nullable<decimal> datee, Nullable<int> cateId)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var isAllParameter = isAll.HasValue ?
                new ObjectParameter("isAll", isAll) :
                new ObjectParameter("isAll", typeof(bool));
    
            var datesParameter = dates.HasValue ?
                new ObjectParameter("dates", dates) :
                new ObjectParameter("dates", typeof(decimal));
    
            var dateeParameter = datee.HasValue ?
                new ObjectParameter("datee", datee) :
                new ObjectParameter("datee", typeof(decimal));
    
            var cateIdParameter = cateId.HasValue ?
                new ObjectParameter("cateId", cateId) :
                new ObjectParameter("cateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GroupProductGetOrderShop_Result>("GroupProductGetOrderShop", customerIDParameter, isAllParameter, datesParameter, dateeParameter, cateIdParameter);
        }
    
        public virtual int insert_ShopProductDetail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_ShopProductDetail");
        }
    
        public virtual int InsertBedByRowColumn(Nullable<int> row, Nullable<int> coloumn, Nullable<int> id, Nullable<int> aid)
        {
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var coloumnParameter = coloumn.HasValue ?
                new ObjectParameter("coloumn", coloumn) :
                new ObjectParameter("coloumn", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var aidParameter = aid.HasValue ?
                new ObjectParameter("aid", aid) :
                new ObjectParameter("aid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertBedByRowColumn", rowParameter, coloumnParameter, idParameter, aidParameter);
        }
    
        public virtual int InsertDNModule(Nullable<int> groupId, Nullable<int> agencyid, Nullable<bool> isDelete)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var agencyidParameter = agencyid.HasValue ?
                new ObjectParameter("Agencyid", agencyid) :
                new ObjectParameter("Agencyid", typeof(int));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("IsDelete", isDelete) :
                new ObjectParameter("IsDelete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDNModule", groupIdParameter, agencyidParameter, isDeleteParameter);
        }
    
        public virtual int InsertExcelShopProduct()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertExcelShopProduct");
        }
    
        public virtual ObjectResult<ListAgencyByKm_Result> ListAgencyByKm(Nullable<int> km, Nullable<double> x, Nullable<double> y, Nullable<int> id, Nullable<decimal> date)
        {
            var kmParameter = km.HasValue ?
                new ObjectParameter("km", km) :
                new ObjectParameter("km", typeof(int));
    
            var xParameter = x.HasValue ?
                new ObjectParameter("x", x) :
                new ObjectParameter("x", typeof(double));
    
            var yParameter = y.HasValue ?
                new ObjectParameter("y", y) :
                new ObjectParameter("y", typeof(double));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListAgencyByKm_Result>("ListAgencyByKm", kmParameter, xParameter, yParameter, idParameter, dateParameter);
        }
    
        public virtual ObjectResult<ListProductAgencyByKm_Result> ListProductAgencyByKm(Nullable<int> km, Nullable<double> x, Nullable<double> y, Nullable<decimal> date)
        {
            var kmParameter = km.HasValue ?
                new ObjectParameter("km", km) :
                new ObjectParameter("km", typeof(int));
    
            var xParameter = x.HasValue ?
                new ObjectParameter("x", x) :
                new ObjectParameter("x", typeof(double));
    
            var yParameter = y.HasValue ?
                new ObjectParameter("y", y) :
                new ObjectParameter("y", typeof(double));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListProductAgencyByKm_Result>("ListProductAgencyByKm", kmParameter, xParameter, yParameter, dateParameter);
        }
    
        public virtual int ListProductSameCategory(Nullable<int> productID, string categoryIds)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("productID", productID) :
                new ObjectParameter("productID", typeof(int));
    
            var categoryIdsParameter = categoryIds != null ?
                new ObjectParameter("CategoryIds", categoryIds) :
                new ObjectParameter("CategoryIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ListProductSameCategory", productIDParameter, categoryIdsParameter);
        }
    
        public virtual int ListTreeLevel(Nullable<int> id, Nullable<int> level)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("level", level) :
                new ObjectParameter("level", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ListTreeLevel", idParameter, levelParameter);
        }
    
        public virtual int Menu_GetChildByParentId(Nullable<int> groupId, Nullable<int> parent, string languageId)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var parentParameter = parent.HasValue ?
                new ObjectParameter("Parent", parent) :
                new ObjectParameter("Parent", typeof(int));
    
            var languageIdParameter = languageId != null ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Menu_GetChildByParentId", groupIdParameter, parentParameter, languageIdParameter);
        }
    
        public virtual ObjectResult<Menu_GetList_Result> Menu_GetList(string languageId, Nullable<int> groupId, Nullable<int> agencyId)
        {
            var languageIdParameter = languageId != null ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(string));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var agencyIdParameter = agencyId.HasValue ?
                new ObjectParameter("AgencyId", agencyId) :
                new ObjectParameter("AgencyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Menu_GetList_Result>("Menu_GetList", languageIdParameter, groupIdParameter, agencyIdParameter);
        }
    
        public virtual int ModuleControl_GetByPageID(string slug, Nullable<int> pageID)
        {
            var slugParameter = slug != null ?
                new ObjectParameter("Slug", slug) :
                new ObjectParameter("Slug", typeof(string));
    
            var pageIDParameter = pageID.HasValue ?
                new ObjectParameter("PageID", pageID) :
                new ObjectParameter("PageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModuleControl_GetByPageID", slugParameter, pageIDParameter);
        }
    
        [DbFunction("FDIEntities", "MonthInYear")]
        public virtual IQueryable<MonthInYear_Result> MonthInYear(Nullable<int> year)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<MonthInYear_Result>("[FDIEntities].[MonthInYear](@year)", yearParameter);
        }
    
        public virtual ObjectResult<ProductFull_Result> ProductFull(string name, Nullable<double> kmmax, Nullable<double> kmmin, Nullable<int> cateid, Nullable<double> x, Nullable<double> y, Nullable<int> minprice, Nullable<int> maxprice, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> hasTransfer, Nullable<int> shopid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var kmmaxParameter = kmmax.HasValue ?
                new ObjectParameter("kmmax", kmmax) :
                new ObjectParameter("kmmax", typeof(double));
    
            var kmminParameter = kmmin.HasValue ?
                new ObjectParameter("kmmin", kmmin) :
                new ObjectParameter("kmmin", typeof(double));
    
            var cateidParameter = cateid.HasValue ?
                new ObjectParameter("cateid", cateid) :
                new ObjectParameter("cateid", typeof(int));
    
            var xParameter = x.HasValue ?
                new ObjectParameter("x", x) :
                new ObjectParameter("x", typeof(double));
    
            var yParameter = y.HasValue ?
                new ObjectParameter("y", y) :
                new ObjectParameter("y", typeof(double));
    
            var minpriceParameter = minprice.HasValue ?
                new ObjectParameter("minprice", minprice) :
                new ObjectParameter("minprice", typeof(int));
    
            var maxpriceParameter = maxprice.HasValue ?
                new ObjectParameter("maxprice", maxprice) :
                new ObjectParameter("maxprice", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var hasTransferParameter = hasTransfer.HasValue ?
                new ObjectParameter("HasTransfer", hasTransfer) :
                new ObjectParameter("HasTransfer", typeof(bool));
    
            var shopidParameter = shopid.HasValue ?
                new ObjectParameter("shopid", shopid) :
                new ObjectParameter("shopid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductFull_Result>("ProductFull", nameParameter, kmmaxParameter, kmminParameter, cateidParameter, xParameter, yParameter, minpriceParameter, maxpriceParameter, pageNumberParameter, pageSizeParameter, hasTransferParameter, shopidParameter);
        }
    
        public virtual ObjectResult<ProductFullOld_Result> ProductFullOld(string name, Nullable<double> kmmax, Nullable<double> kmmin, Nullable<int> cateid, Nullable<double> x, Nullable<double> y, Nullable<int> minprice, Nullable<int> maxprice, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> hasTransfer, Nullable<int> shopid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var kmmaxParameter = kmmax.HasValue ?
                new ObjectParameter("kmmax", kmmax) :
                new ObjectParameter("kmmax", typeof(double));
    
            var kmminParameter = kmmin.HasValue ?
                new ObjectParameter("kmmin", kmmin) :
                new ObjectParameter("kmmin", typeof(double));
    
            var cateidParameter = cateid.HasValue ?
                new ObjectParameter("cateid", cateid) :
                new ObjectParameter("cateid", typeof(int));
    
            var xParameter = x.HasValue ?
                new ObjectParameter("x", x) :
                new ObjectParameter("x", typeof(double));
    
            var yParameter = y.HasValue ?
                new ObjectParameter("y", y) :
                new ObjectParameter("y", typeof(double));
    
            var minpriceParameter = minprice.HasValue ?
                new ObjectParameter("minprice", minprice) :
                new ObjectParameter("minprice", typeof(int));
    
            var maxpriceParameter = maxprice.HasValue ?
                new ObjectParameter("maxprice", maxprice) :
                new ObjectParameter("maxprice", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var hasTransferParameter = hasTransfer.HasValue ?
                new ObjectParameter("HasTransfer", hasTransfer) :
                new ObjectParameter("HasTransfer", typeof(bool));
    
            var shopidParameter = shopid.HasValue ?
                new ObjectParameter("shopid", shopid) :
                new ObjectParameter("shopid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductFullOld_Result>("ProductFullOld", nameParameter, kmmaxParameter, kmminParameter, cateidParameter, xParameter, yParameter, minpriceParameter, maxpriceParameter, pageNumberParameter, pageSizeParameter, hasTransferParameter, shopidParameter);
        }
    
        public virtual ObjectResult<ProductGetbyShop_Result> ProductGetbyShop(Nullable<int> cateid, Nullable<int> customerID, Nullable<bool> isAll, Nullable<decimal> dates, Nullable<decimal> datee, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var cateidParameter = cateid.HasValue ?
                new ObjectParameter("cateid", cateid) :
                new ObjectParameter("cateid", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var isAllParameter = isAll.HasValue ?
                new ObjectParameter("isAll", isAll) :
                new ObjectParameter("isAll", typeof(bool));
    
            var datesParameter = dates.HasValue ?
                new ObjectParameter("dates", dates) :
                new ObjectParameter("dates", typeof(decimal));
    
            var dateeParameter = datee.HasValue ?
                new ObjectParameter("datee", datee) :
                new ObjectParameter("datee", typeof(decimal));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductGetbyShop_Result>("ProductGetbyShop", cateidParameter, customerIDParameter, isAllParameter, datesParameter, dateeParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<ProductGetNearPosition_Result> ProductGetNearPosition(Nullable<int> km, Nullable<double> x, Nullable<double> y, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var kmParameter = km.HasValue ?
                new ObjectParameter("km", km) :
                new ObjectParameter("km", typeof(int));
    
            var xParameter = x.HasValue ?
                new ObjectParameter("x", x) :
                new ObjectParameter("x", typeof(double));
    
            var yParameter = y.HasValue ?
                new ObjectParameter("y", y) :
                new ObjectParameter("y", typeof(double));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductGetNearPosition_Result>("ProductGetNearPosition", kmParameter, xParameter, yParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<ProductGetOrderShop_Result> ProductGetOrderShop(Nullable<int> cateid, Nullable<int> customerID, Nullable<bool> isAll, Nullable<decimal> dates, Nullable<decimal> datee, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var cateidParameter = cateid.HasValue ?
                new ObjectParameter("cateid", cateid) :
                new ObjectParameter("cateid", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var isAllParameter = isAll.HasValue ?
                new ObjectParameter("isAll", isAll) :
                new ObjectParameter("isAll", typeof(bool));
    
            var datesParameter = dates.HasValue ?
                new ObjectParameter("dates", dates) :
                new ObjectParameter("dates", typeof(decimal));
    
            var dateeParameter = datee.HasValue ?
                new ObjectParameter("datee", datee) :
                new ObjectParameter("datee", typeof(decimal));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductGetOrderShop_Result>("ProductGetOrderShop", cateidParameter, customerIDParameter, isAllParameter, datesParameter, dateeParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual int ResultSearchDocument(string categoryID, string keywords)
        {
            var categoryIDParameter = categoryID != null ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(string));
    
            var keywordsParameter = keywords != null ?
                new ObjectParameter("Keywords", keywords) :
                new ObjectParameter("Keywords", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ResultSearchDocument", categoryIDParameter, keywordsParameter);
        }
    
        public virtual ObjectResult<SearchListNewsAdmin_Result> SearchListNewsAdmin(string categoryIds, string keywords, string languageId)
        {
            var categoryIdsParameter = categoryIds != null ?
                new ObjectParameter("CategoryIds", categoryIds) :
                new ObjectParameter("CategoryIds", typeof(string));
    
            var keywordsParameter = keywords != null ?
                new ObjectParameter("Keywords", keywords) :
                new ObjectParameter("Keywords", typeof(string));
    
            var languageIdParameter = languageId != null ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchListNewsAdmin_Result>("SearchListNewsAdmin", categoryIdsParameter, keywordsParameter, languageIdParameter);
        }
    
        public virtual int SearchNewsInAdmin(string sQLString)
        {
            var sQLStringParameter = sQLString != null ?
                new ObjectParameter("SQLString", sQLString) :
                new ObjectParameter("SQLString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SearchNewsInAdmin", sQLStringParameter);
        }
    
        public virtual ObjectResult<ShopMap_Result> ShopMap(string name, Nullable<double> kmmax, Nullable<double> kmmin, Nullable<int> cateid, Nullable<double> x, Nullable<double> y, Nullable<int> minprice, Nullable<int> maxprice)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var kmmaxParameter = kmmax.HasValue ?
                new ObjectParameter("kmmax", kmmax) :
                new ObjectParameter("kmmax", typeof(double));
    
            var kmminParameter = kmmin.HasValue ?
                new ObjectParameter("kmmin", kmmin) :
                new ObjectParameter("kmmin", typeof(double));
    
            var cateidParameter = cateid.HasValue ?
                new ObjectParameter("cateid", cateid) :
                new ObjectParameter("cateid", typeof(int));
    
            var xParameter = x.HasValue ?
                new ObjectParameter("x", x) :
                new ObjectParameter("x", typeof(double));
    
            var yParameter = y.HasValue ?
                new ObjectParameter("y", y) :
                new ObjectParameter("y", typeof(double));
    
            var minpriceParameter = minprice.HasValue ?
                new ObjectParameter("minprice", minprice) :
                new ObjectParameter("minprice", typeof(int));
    
            var maxpriceParameter = maxprice.HasValue ?
                new ObjectParameter("maxprice", maxprice) :
                new ObjectParameter("maxprice", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShopMap_Result>("ShopMap", nameParameter, kmmaxParameter, kmminParameter, cateidParameter, xParameter, yParameter, minpriceParameter, maxpriceParameter);
        }
    
        public virtual ObjectResult<ShopSame_Result> ShopSame(Nullable<int> id, Nullable<double> kmmax, Nullable<double> kmmin, Nullable<double> x, Nullable<double> y, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var kmmaxParameter = kmmax.HasValue ?
                new ObjectParameter("kmmax", kmmax) :
                new ObjectParameter("kmmax", typeof(double));
    
            var kmminParameter = kmmin.HasValue ?
                new ObjectParameter("kmmin", kmmin) :
                new ObjectParameter("kmmin", typeof(double));
    
            var xParameter = x.HasValue ?
                new ObjectParameter("x", x) :
                new ObjectParameter("x", typeof(double));
    
            var yParameter = y.HasValue ?
                new ObjectParameter("y", y) :
                new ObjectParameter("y", typeof(double));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShopSame_Result>("ShopSame", idParameter, kmmaxParameter, kmminParameter, xParameter, yParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual int SortNameBed(Nullable<int> aid)
        {
            var aidParameter = aid.HasValue ?
                new ObjectParameter("aid", aid) :
                new ObjectParameter("aid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SortNameBed", aidParameter);
        }
    
        public virtual int sp_ActionGetByUserId(string user, Nullable<int> type)
        {
            var userParameter = user != null ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ActionGetByUserId", userParameter, typeParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_AttributeGetByCategoryIdAndFileId(Nullable<int> categoryId, Nullable<System.Guid> fileId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AttributeGetByCategoryIdAndFileId", categoryIdParameter, fileIdParameter);
        }
    
        public virtual int sp_AttributeGetByCategoryIdAndFileId2(Nullable<int> categoryId, Nullable<System.Guid> fileId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AttributeGetByCategoryIdAndFileId2", categoryIdParameter, fileIdParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_GetListInventoryValue_Result> sp_GetListInventoryValue(Nullable<int> isValue, Nullable<int> agencyId)
        {
            var isValueParameter = isValue.HasValue ?
                new ObjectParameter("isValue", isValue) :
                new ObjectParameter("isValue", typeof(int));
    
            var agencyIdParameter = agencyId.HasValue ?
                new ObjectParameter("AgencyId", agencyId) :
                new ObjectParameter("AgencyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetListInventoryValue_Result>("sp_GetListInventoryValue", isValueParameter, agencyIdParameter);
        }
    
        public virtual ObjectResult<sp_GetListOrderDetail_Result> sp_GetListOrderDetail(Nullable<decimal> starDate, Nullable<decimal> endDate)
        {
            var starDateParameter = starDate.HasValue ?
                new ObjectParameter("starDate", starDate) :
                new ObjectParameter("starDate", typeof(decimal));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetListOrderDetail_Result>("sp_GetListOrderDetail", starDateParameter, endDateParameter);
        }
    
        public virtual int sp_GetListValueDetail(Nullable<decimal> starDate, Nullable<decimal> endDate, Nullable<int> agencyId)
        {
            var starDateParameter = starDate.HasValue ?
                new ObjectParameter("starDate", starDate) :
                new ObjectParameter("starDate", typeof(decimal));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(decimal));
    
            var agencyIdParameter = agencyId.HasValue ?
                new ObjectParameter("AgencyId", agencyId) :
                new ObjectParameter("AgencyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetListValueDetail", starDateParameter, endDateParameter, agencyIdParameter);
        }
    
        public virtual ObjectResult<sp_GetOrderDetail_Result> sp_GetOrderDetail(Nullable<decimal> todayCode)
        {
            var todayCodeParameter = todayCode.HasValue ?
                new ObjectParameter("todayCode", todayCode) :
                new ObjectParameter("todayCode", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetOrderDetail_Result>("sp_GetOrderDetail", todayCodeParameter);
        }
    
        public virtual ObjectResult<sp_GetUserSchedule_Result> sp_GetUserSchedule(Nullable<int> hoursStart, Nullable<int> minuteStart, Nullable<int> hoursEnd, Nullable<int> minuteEnd)
        {
            var hoursStartParameter = hoursStart.HasValue ?
                new ObjectParameter("HoursStart", hoursStart) :
                new ObjectParameter("HoursStart", typeof(int));
    
            var minuteStartParameter = minuteStart.HasValue ?
                new ObjectParameter("MinuteStart", minuteStart) :
                new ObjectParameter("MinuteStart", typeof(int));
    
            var hoursEndParameter = hoursEnd.HasValue ?
                new ObjectParameter("HoursEnd", hoursEnd) :
                new ObjectParameter("HoursEnd", typeof(int));
    
            var minuteEndParameter = minuteEnd.HasValue ?
                new ObjectParameter("MinuteEnd", minuteEnd) :
                new ObjectParameter("MinuteEnd", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUserSchedule_Result>("sp_GetUserSchedule", hoursStartParameter, minuteStartParameter, hoursEndParameter, minuteEndParameter);
        }
    
        public virtual int sp_GroupProduct(Nullable<bool> show)
        {
            var showParameter = show.HasValue ?
                new ObjectParameter("show", show) :
                new ObjectParameter("show", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GroupProduct", showParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_InsertSalesCode()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertSalesCode");
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<sp_thongkenguoiduyet_Result> sp_thongkenguoiduyet(Nullable<System.DateTime> start, Nullable<System.DateTime> end)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_thongkenguoiduyet_Result>("sp_thongkenguoiduyet", startParameter, endParameter);
        }
    
        public virtual ObjectResult<sp_thongkenguoiviet_Result> sp_thongkenguoiviet(Nullable<System.DateTime> start, Nullable<System.DateTime> end)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_thongkenguoiviet_Result>("sp_thongkenguoiviet", startParameter, endParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<StaticChartsAgencyTotalPrice_Result> StaticChartsAgencyTotalPrice(Nullable<decimal> from, Nullable<decimal> to, Nullable<int> aid)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(decimal));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(decimal));
    
            var aidParameter = aid.HasValue ?
                new ObjectParameter("aid", aid) :
                new ObjectParameter("aid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StaticChartsAgencyTotalPrice_Result>("StaticChartsAgencyTotalPrice", fromParameter, toParameter, aidParameter);
        }
    
        public virtual ObjectResult<StaticChartsbyDayAgencyTotalPrice_Result> StaticChartsbyDayAgencyTotalPrice(Nullable<decimal> from, Nullable<decimal> to, Nullable<int> aid, Nullable<int> type)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(decimal));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(decimal));
    
            var aidParameter = aid.HasValue ?
                new ObjectParameter("aid", aid) :
                new ObjectParameter("aid", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StaticChartsbyDayAgencyTotalPrice_Result>("StaticChartsbyDayAgencyTotalPrice", fromParameter, toParameter, aidParameter, typeParameter);
        }
    
        public virtual ObjectResult<StaticChartsCustomer_Result> StaticChartsCustomer(Nullable<int> i)
        {
            var iParameter = i.HasValue ?
                new ObjectParameter("i", i) :
                new ObjectParameter("i", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StaticChartsCustomer_Result>("StaticChartsCustomer", iParameter);
        }
    
        public virtual ObjectResult<StaticChartsCustomerBuyPacket_Result> StaticChartsCustomerBuyPacket(Nullable<int> i)
        {
            var iParameter = i.HasValue ?
                new ObjectParameter("i", i) :
                new ObjectParameter("i", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StaticChartsCustomerBuyPacket_Result>("StaticChartsCustomerBuyPacket", iParameter);
        }
    
        public virtual ObjectResult<StaticChartsShop_Result> StaticChartsShop(Nullable<int> year, Nullable<int> month, Nullable<int> week, Nullable<System.DateTime> d, Nullable<int> cusId, Nullable<int> cateId)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var weekParameter = week.HasValue ?
                new ObjectParameter("week", week) :
                new ObjectParameter("week", typeof(int));
    
            var dParameter = d.HasValue ?
                new ObjectParameter("d", d) :
                new ObjectParameter("d", typeof(System.DateTime));
    
            var cusIdParameter = cusId.HasValue ?
                new ObjectParameter("cusId", cusId) :
                new ObjectParameter("cusId", typeof(int));
    
            var cateIdParameter = cateId.HasValue ?
                new ObjectParameter("cateId", cateId) :
                new ObjectParameter("cateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StaticChartsShop_Result>("StaticChartsShop", yearParameter, monthParameter, weekParameter, dParameter, cusIdParameter, cateIdParameter);
        }
    
        public virtual ObjectResult<StaticDocumentYear_Result> StaticDocumentYear(Nullable<int> year, Nullable<int> areaid)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var areaidParameter = areaid.HasValue ?
                new ObjectParameter("areaid", areaid) :
                new ObjectParameter("areaid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StaticDocumentYear_Result>("StaticDocumentYear", yearParameter, areaidParameter);
        }
    
        public virtual ObjectResult<SysPage_GetChildByParent_Result> SysPage_GetChildByParent(Nullable<int> parentId, Nullable<int> type, Nullable<int> id, Nullable<int> agencyID)
        {
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var agencyIDParameter = agencyID.HasValue ?
                new ObjectParameter("AgencyID", agencyID) :
                new ObjectParameter("AgencyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SysPage_GetChildByParent_Result>("SysPage_GetChildByParent", parentIdParameter, typeParameter, idParameter, agencyIDParameter);
        }
    
        public virtual int TK_HOME(Nullable<int> day, Nullable<int> year, Nullable<int> shopid, Nullable<int> type)
        {
            var dayParameter = day.HasValue ?
                new ObjectParameter("day", day) :
                new ObjectParameter("day", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var shopidParameter = shopid.HasValue ?
                new ObjectParameter("shopid", shopid) :
                new ObjectParameter("shopid", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TK_HOME", dayParameter, yearParameter, shopidParameter, typeParameter);
        }
    
        public virtual ObjectResult<Top100CustomerBuy_Result> Top100CustomerBuy()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Top100CustomerBuy_Result>("Top100CustomerBuy");
        }
    
        public virtual ObjectResult<Top100CustomerSell_Result> Top100CustomerSell()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Top100CustomerSell_Result>("Top100CustomerSell");
        }
    
        public virtual int TruncateTable(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TruncateTable", tableNameParameter);
        }
    
        public virtual int UpdateAdminRoleActive(Nullable<System.Guid> roleid, string lid)
        {
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("roleid", roleid) :
                new ObjectParameter("roleid", typeof(System.Guid));
    
            var lidParameter = lid != null ?
                new ObjectParameter("lid", lid) :
                new ObjectParameter("lid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAdminRoleActive", roleidParameter, lidParameter);
        }
    
        public virtual int UpdateAdminRoleModuleActive(Nullable<System.Guid> roleid, string lid)
        {
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("roleid", roleid) :
                new ObjectParameter("roleid", typeof(System.Guid));
    
            var lidParameter = lid != null ?
                new ObjectParameter("lid", lid) :
                new ObjectParameter("lid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAdminRoleModuleActive", roleidParameter, lidParameter);
        }
    
        public virtual int UpdateAdminUserActive(Nullable<System.Guid> userid, string lid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(System.Guid));
    
            var lidParameter = lid != null ?
                new ObjectParameter("lid", lid) :
                new ObjectParameter("lid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAdminUserActive", useridParameter, lidParameter);
        }
    
        public virtual int UpdateCard(Nullable<int> id1, Nullable<int> id2, Nullable<int> status)
        {
            var id1Parameter = id1.HasValue ?
                new ObjectParameter("id1", id1) :
                new ObjectParameter("id1", typeof(int));
    
            var id2Parameter = id2.HasValue ?
                new ObjectParameter("id2", id2) :
                new ObjectParameter("id2", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCard", id1Parameter, id2Parameter, statusParameter);
        }
    
        public virtual int UpdateRoleActive(Nullable<System.Guid> roleid, string lid)
        {
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("roleid", roleid) :
                new ObjectParameter("roleid", typeof(System.Guid));
    
            var lidParameter = lid != null ?
                new ObjectParameter("lid", lid) :
                new ObjectParameter("lid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRoleActive", roleidParameter, lidParameter);
        }
    
        public virtual int UpdateRoleModuleActive(Nullable<System.Guid> roleid, string lid)
        {
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("roleid", roleid) :
                new ObjectParameter("roleid", typeof(System.Guid));
    
            var lidParameter = lid != null ?
                new ObjectParameter("lid", lid) :
                new ObjectParameter("lid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRoleModuleActive", roleidParameter, lidParameter);
        }
    
        public virtual int UpdateUserActive(Nullable<System.Guid> userid, string lid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(System.Guid));
    
            var lidParameter = lid != null ?
                new ObjectParameter("lid", lid) :
                new ObjectParameter("lid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserActive", useridParameter, lidParameter);
        }
    }
}
